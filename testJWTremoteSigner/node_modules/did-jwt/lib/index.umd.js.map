{"version":3,"file":"index.umd.js","sources":["../src/util.ts","../src/Digest.ts","../src/signers/ES256KSigner.ts","../src/signers/SimpleSigner.ts","../src/signers/EllipticSigner.ts","../src/signers/EdDSASigner.ts","../src/signers/NaclSigner.ts","../src/SignerAlgorithm.ts","../src/blockchains/utils/ripemd160.ts","../src/blockchains/bip122.ts","../src/blockchains/cosmos.ts","../src/blockchains/index.ts","../src/VerifierAlgorithm.ts","../src/JWT.ts","../src/JWE.ts","../src/ECDH.ts","../src/xc20pEncryption.ts"],"sourcesContent":["import * as u8a from 'uint8arrays'\nimport { bases } from 'multiformats/basics'\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number | null\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function bytesToBase58(b: Uint8Array): string {\n  return u8a.toString(b, 'base58btc')\n}\n\nexport function bytesToMultibase(b: Uint8Array, base: keyof typeof bases): string {\n  return bases[base].encode(b)\n}\n\nexport function hexToBytes(s: string): Uint8Array {\n  const input = s.startsWith('0x') ? s.substring(2) : s\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s)\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (typeof recoveryParam === 'undefined') {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = <number>recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam?: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)])\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n","import { hash } from '@stablelib/sha256'\nimport * as u8a from 'uint8arrays'\nimport sha3 from 'js-sha3'\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = typeof payload === 'string' ? u8a.fromString(payload) : payload\n  return hash(data)\n}\n\nexport function keccak(data: Uint8Array): Uint8Array {\n  return new Uint8Array(sha3.keccak_256.arrayBuffer(data))\n}\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = u8a.fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => u8a.concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(\n  secret: Uint8Array,\n  keyLen: number,\n  alg: string,\n  producerInfo?: Uint8Array,\n  consumerInfo?: Uint8Array\n): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = u8a.concat([\n    lengthAndInput(u8a.fromString(alg)),\n    lengthAndInput(typeof producerInfo === 'undefined' ? new Uint8Array(0) : producerInfo), // apu\n    lengthAndInput(typeof consumerInfo === 'undefined' ? new Uint8Array(0) : consumerInfo), // apv\n    writeUint32BE(keyLen),\n  ])\n\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return hash(u8a.concat([writeUint32BE(roundNumber), secret, value]))\n}\n","import { leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\nimport elliptic from 'elliptic'\n\nconst secp256k1 = new elliptic.ec('secp256k1')\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array`\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: Uint8Array, recoverable = false): Signer {\n  const privateKeyBytes: Uint8Array = privateKey\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: elliptic.ec.KeyPair = secp256k1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s, recoveryParam }: elliptic.ec.Signature = keyPair.sign(sha256(data))\n    return toJose(\n      {\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam,\n      },\n      recoverable\n    )\n  }\n}\n","import { fromJose, hexToBytes } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexToBytes(hexPrivateKey), true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n","import { hexToBytes } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexToBytes(hexPrivateKey))\n}\n\nexport default EllipticSigner\n","import { sign } from '@stablelib/ed25519'\nimport { Signer } from '../JWT'\nimport { bytesToBase64url, stringToBytes } from '../util'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array`\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = secretKey\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = typeof data === 'string' ? stringToBytes(data) : data\n    const sig: Uint8Array = sign(privateKeyBytes, dataBytes)\n    return bytesToBase64url(sig)\n  }\n}\n","import { EdDSASigner as EdDSASigner } from './EdDSASigner'\nimport { Signer } from '../JWT'\nimport { base64ToBytes } from '../util'\n\n/**\n * @deprecated Please use EdDSASigner\n *\n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64ToBytes(base64PrivateKey))\n}\n\nexport default NaclSigner\n","import { Signer, SignerAlgorithm } from './JWT'\nimport { EcdsaSignature, fromJose, toJose } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') {\n        throw new Error(`not_supported: ES256K-R not supported when signer doesn't provide a recovery param`)\n      }\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('invalid_config: expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg(),\n}\n\nfunction SignerAlg(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlg\n","// https://github.com/crypto-browserify/ripemd160/blob/master/index.js\n\nconst zl = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14,\n  4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2,\n  10, 14, 1, 3, 8, 11, 6, 15, 13,\n]\n\nconst zr = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1,\n  3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5,\n  8, 7, 6, 2, 13, 14, 0, 3, 9, 11,\n]\n\nconst sl = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11,\n  13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5,\n  11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,\n]\n\nconst sr = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7,\n  15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9,\n  12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,\n]\n\nconst hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]\nconst hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]\n\nfunction rotl(x: number, n: number) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction fn1(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn2(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn3(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b | ~c) ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn4(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn5(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ (c | ~d)) + m + k) | 0, s) + e) | 0\n}\n\nexport class Ripemd160 {\n  // state\n  private _a = 0x67452301\n  private _b = 0xefcdab89\n  private _c = 0x98badcfe\n  private _d = 0x10325476\n  private _e = 0xc3d2e1f0\n  private _blockOffset = 0\n  private _block: Uint8Array\n  private _blockSize: number\n  private _length = [0, 0, 0, 0]\n  private _finalized: boolean\n\n  constructor(blockSize = 64) {\n    this._block = new Uint8Array(blockSize)\n    this._blockSize = blockSize\n    this._blockOffset = 0\n    this._length = [0, 0, 0, 0]\n    this._finalized = false\n  }\n\n  update = (data: Uint8Array): Ripemd160 => {\n    if (this._finalized) throw new Error('Digest already called')\n\n    // consume data\n    const block = this._block\n    let offset = 0\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (let i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++]\n      this._update()\n      this._blockOffset = 0\n    }\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n    // update length\n    for (let j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry\n      carry = (this._length[j] / 0x0100000000) | 0\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry\n    }\n\n    return this\n  }\n\n  digest = (): Uint8Array => {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    const digest = this._digest()\n\n    // reset state\n    this._block.fill(0)\n    this._blockOffset = 0\n    for (let i = 0; i < 4; ++i) this._length[i] = 0\n\n    return digest\n  }\n\n  private _update = () => {\n    const words = new Array(16)\n    const temp = new DataView(this._block.buffer)\n    for (let j = 0; j < 16; ++j) words[j] = words[j] = temp.getInt32(j * 4, true)\n\n    let al = this._a | 0\n    let bl = this._b | 0\n    let cl = this._c | 0\n    let dl = this._d | 0\n    let el = this._e | 0\n\n    let ar = this._a | 0\n    let br = this._b | 0\n    let cr = this._c | 0\n    let dr = this._d | 0\n    let er = this._e | 0\n\n    // computation\n    for (let i = 0; i < 80; i += 1) {\n      let tl\n      let tr\n      if (i < 16) {\n        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])\n        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])\n      } else if (i < 32) {\n        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])\n        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])\n      } else if (i < 48) {\n        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])\n        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])\n      } else if (i < 64) {\n        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])\n        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])\n      } else {\n        // if (i<80) {\n        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])\n        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])\n      }\n\n      al = el\n      el = dl\n      dl = rotl(cl, 10)\n      cl = bl\n      bl = tl\n\n      ar = er\n      er = dr\n      dr = rotl(cr, 10)\n      cr = br\n      br = tr\n    }\n\n    // update state\n    const t = (this._b + cl + dr) | 0\n    this._b = (this._c + dl + er) | 0\n    this._c = (this._d + el + ar) | 0\n    this._d = (this._e + al + br) | 0\n    this._e = (this._a + bl + cr) | 0\n    this._a = t\n  }\n\n  private _digest = () => {\n    // create padding and handle blocks\n    this._block[this._blockOffset++] = 0x80\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64)\n      this._update()\n      this._blockOffset = 0\n    }\n\n    this._block.fill(0, this._blockOffset, 56)\n    const temp = new DataView(this._block.buffer)\n    temp.setUint32(56, this._length[0], true)\n    temp.setUint32(60, this._length[1], true)\n    this._block = new Uint8Array(temp.buffer)\n    this._update()\n\n    // produce result\n    const buffer = new DataView(new Uint8Array(20).buffer)\n    buffer.setInt32(0, this._a, true)\n    buffer.setInt32(4, this._b, true)\n    buffer.setInt32(8, this._c, true)\n    buffer.setInt32(12, this._d, true)\n    buffer.setInt32(16, this._e, true)\n\n    return new Uint8Array(buffer.buffer)\n  }\n}\n","import * as u8a from 'uint8arrays'\nimport { bytesToBase58, base58ToBytes } from '../util'\nimport { sha256 } from '../Digest'\nimport { Ripemd160 } from './utils/ripemd160'\n\nexport const publicKeyToAddress = (publicKey: string, otherAddress: string): string => {\n  // Use the same version/prefix byte as the given address.\n  const version = u8a.toString(base58ToBytes(otherAddress).slice(0, 1), 'hex')\n  const publicKeyBuffer = u8a.fromString(publicKey, 'hex')\n  const publicKeyHash = new Ripemd160().update(sha256(publicKeyBuffer)).digest()\n  const step1 = version + u8a.toString(publicKeyHash, 'hex')\n  const step2 = sha256(u8a.fromString(step1, 'hex'))\n  const step3 = sha256(step2)\n  const checksum = u8a.toString(step3, 'hex').substring(0, 8)\n  const step4 = step1 + checksum\n  return bytesToBase58(u8a.fromString(step4, 'hex'))\n}\n","import elliptic from 'elliptic'\nimport { bech32 } from 'bech32'\nimport * as u8a from 'uint8arrays'\nimport { sha256 } from '../Digest'\nimport { Ripemd160 } from './utils/ripemd160'\n\nconst EC = elliptic.ec\n\nexport const publicKeyToAddress = (publicKey: string, prefix: string): string => {\n  const ec = new EC('secp256k1')\n  const compressedPublicKey = ec.keyFromPublic(publicKey, 'hex').getPublic().encode('hex', true)\n  const publicKeyBuffer = u8a.fromString(compressedPublicKey, 'hex')\n  const hash = new Ripemd160().update(sha256(publicKeyBuffer)).digest()\n  const words = bech32.toWords(hash)\n  return bech32.encode(prefix, words).replace(prefix, '')\n}\n","import { publicKeyToAddress as bip122 } from './bip122'\nimport { publicKeyToAddress as cosmos } from './cosmos'\nimport { toEthereumAddress } from '../Digest'\n\nexport const verifyBlockchainAccountId = (publicKey: string, blockchainAccountId: string | undefined): boolean => {\n  if (blockchainAccountId) {\n    const chain = blockchainAccountId.split(':')\n    switch (chain[0]) {\n      case 'bip122':\n        chain[chain.length - 1] = bip122(publicKey, chain[chain.length - 1])\n        break\n      case 'cosmos':\n        chain[chain.length - 1] = cosmos(publicKey, chain[1])\n        break\n      case 'eip155':\n        chain[chain.length - 1] = toEthereumAddress(publicKey)\n        break\n      default:\n        return false\n    }\n    return chain.join(':') === blockchainAccountId\n  }\n  return false\n}\n","import type { SignatureInput } from 'elliptic'\nimport elliptic from 'elliptic'\nimport { sha256, toEthereumAddress } from './Digest'\nimport { verify } from '@stablelib/ed25519'\nimport type { VerificationMethod } from 'did-resolver'\nimport { bases } from 'multiformats/basics'\nimport { hexToBytes, base58ToBytes, base64ToBytes, bytesToHex, EcdsaSignature, stringToBytes } from './util'\nimport { verifyBlockchainAccountId } from './blockchains'\n\nconst secp256k1 = new elliptic.ec('secp256k1')\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawSig: Uint8Array = base64ToBytes(signature)\n  if (rawSig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawSig.slice(0, 32))\n  const s: string = bytesToHex(rawSig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawSig[64]\n  }\n  return sigObj\n}\n\ninterface LegacyVerificationMethod extends VerificationMethod {\n  publicKeyBase64: string\n}\n\nfunction extractPublicKeyBytes(pk: VerificationMethod): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if ((<LegacyVerificationMethod>pk).publicKeyBase64) {\n    return base64ToBytes((<LegacyVerificationMethod>pk).publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'secp256k1' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return hexToBytes(\n      secp256k1\n        .keyFromPublic({\n          x: bytesToHex(base64ToBytes(pk.publicKeyJwk.x)),\n          y: bytesToHex(base64ToBytes(pk.publicKeyJwk.y)),\n        })\n        .getPublic('hex')\n    )\n  } else if (pk.publicKeyMultibase) {\n    const { base16, base58btc, base64, base64url } = bases\n    const baseDecoder = base16.decoder.or(base58btc.decoder.or(base64.decoder.or(base64url.decoder)))\n    return baseDecoder.decode(pk.publicKeyMultibase)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined'\n  })\n  const blockchainAddressKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress !== 'undefined' || typeof blockchainAccountId !== 'undefined'\n  })\n\n  let signer: VerificationMethod | undefined = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, <SignatureInput>sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && blockchainAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, blockchainAddressKeys)\n  }\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  let signatures: EcdsaSignature[]\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)]\n  } else {\n    const so = toSignatureObject(signature, false)\n    signatures = [\n      { ...so, recoveryParam: 0 },\n      { ...so, recoveryParam: 1 },\n    ]\n  }\n\n  const checkSignatureAgainstSigner = (sigObj: EcdsaSignature): VerificationMethod | undefined => {\n    const hash: Uint8Array = sha256(data)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const recoveredKey: any = secp256k1.recoverPubKey(hash, <SignatureInput>sigObj, <number>sigObj.recoveryParam)\n    const recoveredPublicKeyHex: string = recoveredKey.encode('hex')\n    const recoveredCompressedPublicKeyHex: string = recoveredKey.encode('hex', true)\n    const recoveredAddress: string = toEthereumAddress(recoveredPublicKeyHex)\n\n    const signer: VerificationMethod | undefined = authenticators.find((pk: VerificationMethod) => {\n      const keyHex = bytesToHex(extractPublicKeyBytes(pk))\n      return (\n        keyHex === recoveredPublicKeyHex ||\n        keyHex === recoveredCompressedPublicKeyHex ||\n        pk.ethereumAddress?.toLowerCase() === recoveredAddress ||\n        pk.blockchainAccountId?.split('@eip155')?.[0].toLowerCase() === recoveredAddress || // CAIP-2\n        verifyBlockchainAccountId(recoveredPublicKeyHex, pk.blockchainAccountId) // CAIP-10\n      )\n    })\n\n    return signer\n  }\n\n  const signer: VerificationMethod[] = signatures\n    .map(checkSignatureAgainstSigner)\n    .filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n\n  if (signer.length === 0) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer[0]\n}\n\nexport function verifyEd25519(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const clear: Uint8Array = stringToBytes(data)\n  const sig: Uint8Array = base64ToBytes(signature)\n  const signer = authenticators.find((pk: VerificationMethod) => {\n    return verify(extractPublicKeyBytes(pk), clear, sig)\n  })\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: VerificationMethod[]) => VerificationMethod\ninterface Algorithms {\n  [name: string]: Verifier\n}\nconst algorithms: Algorithms = {\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519,\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n","import canonicalizeData from 'canonicalize'\nimport type { DIDDocument, DIDResolutionResult, Resolvable, VerificationMethod } from 'did-resolver'\nimport SignerAlg from './SignerAlgorithm'\nimport { decodeBase64url, EcdsaSignature, encodeBase64url } from './util'\nimport VerifierAlgorithm from './VerifierAlgorithm'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport type ProofPurposeTypes =\n  | 'assertionMethod'\n  | 'authentication'\n  // | 'keyAgreement' // keyAgreement VerificationMethod should not be used for signing\n  | 'capabilityDelegation'\n  | 'capabilityInvocation'\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n  canonicalize?: boolean\n}\n\nexport interface JWTVerifyOptions {\n  /** @deprecated Please use `proofPurpose: 'authentication' instead` */\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolvable\n  skewTime?: number\n  /** See https://www.w3.org/TR/did-spec-registries/#verification-relationships */\n  proofPurpose?: ProofPurposeTypes\n}\n\nexport interface JWSCreationOptions {\n  canonicalize?: boolean\n}\n\nexport interface DIDAuthenticator {\n  authenticators: VerificationMethod[]\n  issuer: string\n  didResolutionResult: DIDResolutionResult\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  exp?: number\n  rexp?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\nexport interface JWTVerified {\n  payload: Partial<JWTPayload>\n  didResolutionResult: DIDResolutionResult\n  issuer: string\n  signer: VerificationMethod\n  jwt: string\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256K: [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n  ],\n  'ES256K-R': [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n  ],\n  Ed25519: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n}\n\nexport const SELF_ISSUED_V2 = 'https://self-issued.me/v2'\nexport const SELF_ISSUED_V0_1 = 'https://self-issued.me'\n\ntype LegacyVerificationMethod = { publicKey?: string }\n\nconst defaultAlg = 'ES256K'\nconst DID_JSON = 'application/did+json'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction encodeSection(data: any, shouldCanonicalize = false): string {\n  if (shouldCanonicalize) {\n    return encodeBase64url(<string>canonicalizeData(data))\n  } else {\n    return encodeBase64url(JSON.stringify(data))\n  }\n}\n\nexport const NBF_SKEW = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`,\n    }\n  }\n  throw new Error('invalid_argument: Incorrect format JWS')\n}\n\n/**  @module did-jwt/JWT */\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string): JWTDecoded {\n  if (!jwt) throw new Error('invalid_argument: no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    return decodedJwt\n  } catch (e) {\n    throw new Error('invalid_argument: Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @param    {Object}            options           can be used to trigger automatic canonicalization of header and\n *                                                    payload properties\n *  @return   {Promise<string>}                     a Promise which resolves to a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | Partial<JWTPayload>,\n  signer: Signer,\n  header: Partial<JWTHeader> = {},\n  options: JWSCreationOptions = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize)\n  const signingInput: string = [encodeSection(header, options.canonicalize), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlg(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload               payload object\n *  @param    {Object}            [options]             an unsigned credential object\n *  @param    {String}            options.issuer        The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg           [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.\n *                                                      Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer        a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {boolean}           options.canonicalize  optional flag to canonicalize header and payload before signing\n *  @param    {Object}            header                optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or rejects with an error\n */\nexport async function createJWT(\n  payload: Partial<JWTPayload>,\n  { issuer, signer, alg, expiresIn, canonicalize }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('missing_signer: No Signer functionality has been configured')\n  if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined,\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = <number>(payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('invalid_argument: JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header, { canonicalize })\n}\n\nfunction verifyJWSDecoded(\n  { header, data, signature }: JWSDecoded,\n  pubKeys: VerificationMethod | VerificationMethod[]\n): VerificationMethod {\n  if (!Array.isArray(pubKeys)) pubKeys = [pubKeys]\n  const signer: VerificationMethod = VerifierAlgorithm(header.alg)(data, signature, pubKeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubKeys` match.\n *\n *  @example\n *  const pubKey = verifyJWS('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<VerificationMethod> | VerificationMethod}    pubKeys     The public keys used to verify the JWS\n *  @return   {VerificationMethod}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubKeys: VerificationMethod | VerificationMethod[]): VerificationMethod {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubKeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the did doc of the issuer of the JWT.\n *\n *  @example\n *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {\n *      const did = obj.did // DID of signer\n *      const payload = obj.payload\n *      const doc = obj.doc // DID Document of signer\n *      const jwt = obj.jwt\n *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT\n *      ...\n *  })\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: undefined,\n    auth: undefined,\n    audience: undefined,\n    callbackUrl: undefined,\n    skewTime: undefined,\n    proofPurpose: undefined,\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('missing_resolver: No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt)\n  const proofPurpose: ProofPurposeTypes | undefined = Object.prototype.hasOwnProperty.call(options, 'auth')\n    ? options.auth\n      ? 'authentication'\n      : undefined\n    : options.proofPurpose\n  if (!payload.iss) {\n    throw new Error('invalid_jwt: JWT iss is required')\n  }\n  let did = ''\n  if (payload.iss === SELF_ISSUED_V2) {\n    if (!payload.sub) {\n      throw new Error('invalid_jwt: JWT sub is required')\n    }\n    if (typeof payload.sub_jwk === 'undefined') {\n      did = payload.sub\n    } else {\n      did = (header.kid || '').split('#')[0]\n    }\n  } else if (payload.iss === SELF_ISSUED_V0_1) {\n    if (!payload.did) {\n      throw new Error('invalid_jwt: JWT did is required')\n    }\n    did = payload.did\n  } else {\n    did = payload.iss\n  }\n  if (!did) {\n    throw new Error(`invalid_jwt: No DID has been found in the JWT`)\n  }\n  const { didResolutionResult, authenticators, issuer }: DIDAuthenticator = await resolveAuthenticator(\n    options.resolver,\n    header.alg,\n    did,\n    proofPurpose\n  )\n  const signer: VerificationMethod = await verifyJWSDecoded({ header, data, signature } as JWSDecoded, authenticators)\n  const now: number = Math.floor(Date.now() / 1000)\n  const skewTime = typeof options.skewTime !== 'undefined' && options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n  if (signer) {\n    const nowSkewed = now + skewTime\n    if (payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`invalid_jwt: JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`invalid_jwt: JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`invalid_jwt: JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error('invalid_config: JWT audience is required but your app address has not been configured')\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`invalid_config: JWT audience does not match your DID or callback url`)\n      }\n    }\n    return { payload, didResolutionResult, issuer, signer, jwt }\n  }\n  throw new Error(\n    `invalid_signature: JWT not valid. issuer DID document does not contain a verificationMethod that matches the signature.`\n  )\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID\n *\n *  @example\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      ...\n *  })\n *\n *  @param    {String}            alg                a JWT algorithm\n *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup\n *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document\n *  @return   {Promise<DIDAuthenticator>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error\n */\nexport async function resolveAuthenticator(\n  resolver: Resolvable,\n  alg: string,\n  issuer: string,\n  proofPurpose?: ProofPurposeTypes\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`not_supported: No supported signature types for algorithm ${alg}`)\n  }\n  let didResult: DIDResolutionResult\n\n  const result = (await resolver.resolve(issuer, { accept: DID_JSON })) as unknown\n  // support legacy resolvers that do not produce DIDResolutionResult\n  if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {\n    didResult = {\n      didDocument: result as DIDDocument,\n      didDocumentMetadata: {},\n      didResolutionMetadata: { contentType: DID_JSON },\n    }\n  } else {\n    didResult = result as DIDResolutionResult\n  }\n\n  if (didResult.didResolutionMetadata?.error || didResult.didDocument == null) {\n    const { error, message } = didResult.didResolutionMetadata\n    throw new Error(`resolver_error: Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`)\n  }\n\n  const getPublicKeyById = (verificationMethods: VerificationMethod[], pubid?: string): VerificationMethod | null => {\n    const filtered = verificationMethods.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: VerificationMethod[] = [\n    ...(didResult?.didDocument?.verificationMethod || []),\n    ...(didResult?.didDocument?.publicKey || []),\n  ]\n  if (typeof proofPurpose === 'string') {\n    // support legacy DID Documents that do not list assertionMethod\n    if (\n      proofPurpose.startsWith('assertion') &&\n      !Object.getOwnPropertyNames(didResult?.didDocument).includes('assertionMethod')\n    ) {\n      didResult.didDocument = { ...(<DIDDocument>didResult.didDocument) }\n      didResult.didDocument.assertionMethod = [...publicKeysToCheck.map((pk) => pk.id)]\n    }\n\n    publicKeysToCheck = (didResult.didDocument[proofPurpose] || [])\n      .map((verificationMethod) => {\n        if (typeof verificationMethod === 'string') {\n          return getPublicKeyById(publicKeysToCheck, verificationMethod)\n        } else if (typeof (<LegacyVerificationMethod>verificationMethod).publicKey === 'string') {\n          // this is a legacy format\n          return getPublicKeyById(publicKeysToCheck, (<LegacyVerificationMethod>verificationMethod).publicKey)\n        } else {\n          return <VerificationMethod>verificationMethod\n        }\n      })\n      .filter((key) => key != null) as VerificationMethod[]\n  }\n\n  const authenticators: VerificationMethod[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {\n    throw new Error(\n      `no_suitable_keys: DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`\n    )\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`no_suitable_keys: DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, didResolutionResult: didResult }\n}\n","import { fromString } from 'uint8arrays'\nimport { base64ToBytes, bytesToBase64url, decodeBase64url, toSealed } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ProtectedHeader = Record<string, any> & Partial<RecipientHeader>\n\n/**\n * The JWK representation of an ephemeral public key.\n * See https://www.rfc-editor.org/rfc/rfc7518.html#section-6\n */\ninterface EphemeralPublicKey {\n  kty?: string\n  //ECC\n  crv?: string\n  x?: string\n  y?: string\n  //RSA\n  n?: string\n  e?: string\n}\n\nexport interface RecipientHeader {\n  alg: string\n  iv: string\n  tag: string\n  epk?: EphemeralPublicKey\n  kid?: string\n  apv?: string\n  apu?: string\n}\n\nexport interface Recipient {\n  header: RecipientHeader\n  encrypted_key: string\n}\n\nexport interface JWE {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Recipient[]\n}\n\nexport interface EncryptionResult {\n  ciphertext: Uint8Array\n  tag: Uint8Array\n  iv: Uint8Array\n  protectedHeader?: string\n  recipient?: Recipient\n  cek?: Uint8Array\n}\n\nexport interface Encrypter {\n  alg: string\n  enc: string\n  encrypt: (cleartext: Uint8Array, protectedHeader: ProtectedHeader, aad?: Uint8Array) => Promise<EncryptionResult>\n  encryptCek?: (cek: Uint8Array) => Promise<Recipient>\n}\n\nexport interface Decrypter {\n  alg: string\n  enc: string\n  decrypt: (sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array, recipient?: Recipient) => Promise<Uint8Array | null>\n}\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('bad_jwe: missing properties')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map((rec) => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('bad_jwe: malformed recipients')\n      }\n    })\n  }\n}\n\nfunction encodeJWE({ ciphertext, tag, iv, protectedHeader, recipient }: EncryptionResult, aad?: Uint8Array): JWE {\n  const jwe: JWE = {\n    protected: <string>protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag),\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(\n  cleartext: Uint8Array,\n  encrypters: Encrypter[],\n  protectedHeader = {},\n  aad?: Uint8Array\n): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('not_supported: Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('invalid_argument: Incompatible encrypters passed')\n    }\n    let cek\n    let jwe\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        const recipient = await encrypter.encryptCek?.(cek)\n        if (recipient) {\n          jwe?.recipients?.push(recipient)\n        }\n      }\n    }\n    return <JWE>jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc)\n    throw new Error(`not_supported: Decrypter does not supported: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = fromString(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected)\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('bad_jwe: missing recipients')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('failure: Failed to decrypt')\n  return cleartext\n}\n","import { sharedKey } from '@stablelib/x25519'\n\n/**\n * A wrapper around `mySecretKey` that can compute a shared secret using `theirPublicKey`.\n * The promise should resolve to a `Uint8Array` containing the raw shared secret.\n *\n * This method is meant to be used when direct access to a secret key is impossible or not desired.\n *\n * @param theirPublicKey `Uint8Array` the other party's public key\n * @returns a `Promise` that resolves to a `Uint8Array` representing the computed shared secret\n */\nexport type ECDH = (theirPublicKey: Uint8Array) => Promise<Uint8Array>\n\n/**\n * Wraps an X25519 secret key into an ECDH method that can be used to compute a shared secret with a public key.\n * @param mySecretKey A `Uint8Array` of length 32 representing the bytes of my secret key\n * @returns an `ECDH` method with the signature `(theirPublicKey: Uint8Array) => Promise<Uint8Array>`\n *\n * @throws 'invalid_argument:...' if the secret key size is wrong\n */\nexport function createX25519ECDH(mySecretKey: Uint8Array): ECDH {\n  if (mySecretKey.length !== 32) {\n    throw new Error('invalid_argument: incorrect secret key length for X25519')\n  }\n  return async (theirPublicKey: Uint8Array): Promise<Uint8Array> => {\n    if (theirPublicKey.length !== 32) {\n      throw new Error('invalid_argument: incorrect publicKey key length for X25519')\n    }\n    return sharedKey(mySecretKey, theirPublicKey)\n  }\n}\n","import { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305'\nimport { generateKeyPair, sharedKey } from '@stablelib/x25519'\nimport { randomBytes } from '@stablelib/random'\nimport { concatKDF } from './Digest'\nimport { bytesToBase64url, base58ToBytes, encodeBase64url, toSealed, base64ToBytes } from './util'\nimport { Recipient, EncryptionResult, Encrypter, Decrypter, ProtectedHeader } from './JWE'\nimport type { VerificationMethod, Resolvable } from 'did-resolver'\nimport { ECDH } from './ECDH'\nimport { fromString } from 'uint8arrays/from-string'\n\n/**\n * Extra parameters for JWE using authenticated encryption\n */\nexport type AuthEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.2}\n   * base64url encoded\n   */\n  apu?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.3}\n   * base64url encoded\n   */\n  apv?: string\n}\n\n/**\n * Extra parameters for JWE using anonymous encryption\n */\nexport type AnonEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n}\n\n/**\n * Recommended encrypter for authenticated encryption (i.e. sender authentication and requires\n * sender private key to encrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientPublicKey the byte array representing the recipient public key\n * @param senderSecret either a Uint8Array representing the sender secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param options {@link AuthEncryptParams} used to specify extra header parameters\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthEncrypter(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  return xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options)\n}\n\n/**\n * Recommended encrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2}.\n *\n * @param publicKey the byte array representing the recipient public key\n * @param options {@link AnonEncryptParams} used to specify the recipient key ID (`kid`)\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonEncrypter(publicKey: Uint8Array, options: Partial<AnonEncryptParams> = {}): Encrypter {\n  return x25519Encrypter(publicKey, options?.kid)\n}\n\n/**\n * Recommended decrypter for authenticated encryption (i.e. sender authentication and requires\n * sender public key to decrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param senderPublicKey the byte array representing the sender public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthDecrypter(recipientSecret: Uint8Array | ECDH, senderPublicKey: Uint8Array): Decrypter {\n  return xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey)\n}\n\n/**\n * Recommended decrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonDecrypter(recipientSecret: Uint8Array | ECDH): Decrypter {\n  return x25519Decrypter(recipientSecret)\n}\n\nfunction xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  const cipher = new XChaCha20Poly1305(key)\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(cipher.nonceLength)\n    const sealed = cipher.seal(iv, cleartext, aad)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv,\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = fromString(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader)\n    return {\n      ...xc20pEncrypt(cleartext, encodedAad),\n      protectedHeader: protHeader,\n    }\n  }\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  const cipher = new XChaCha20Poly1305(key)\n  async function decrypt(sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array): Promise<Uint8Array | null> {\n    return cipher.open(iv, sealed, aad)\n  }\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const sharedSecret = sharedKey(epk.secretKey, publicKey)\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (kid) recipient.header.kid = kid\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n\n  let partyUInfo: Uint8Array\n  let partyVInfo: Uint8Array\n  if (options.apu !== undefined) partyUInfo = base64ToBytes(options.apu)\n  if (options.apv !== undefined) partyVInfo = base64ToBytes(options.apv)\n\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const zE = sharedKey(epk.secretKey, recipientPublicKey)\n\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    let zS\n    if (senderSecret instanceof Uint8Array) {\n      zS = sharedKey(senderSecret, recipientPublicKey)\n    } else {\n      zS = await senderSecret(recipientPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg, partyUInfo, partyVInfo)\n\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (options.kid) recipient.header.kid = options.kid\n    if (options.apu) recipient.header.apu = options.apu\n    if (options.apv) recipient.header.apv = options.apv\n\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolvable): Promise<Encrypter[]> {\n  const encryptersForDID = async (did: string, resolved: string[] = []): Promise<Encrypter[]> => {\n    const { didResolutionMetadata, didDocument } = await resolver.resolve(did)\n    resolved.push(did)\n    if (didResolutionMetadata?.error || didDocument == null) {\n      throw new Error(\n        `resolver_error: Could not resolve ${did}: ${didResolutionMetadata.error}, ${didResolutionMetadata.message}`\n      )\n    }\n    let controllerEncrypters: Encrypter[] = []\n    if (!didDocument.controller && !didDocument.keyAgreement) {\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    }\n    if (didDocument.controller) {\n      let controllers = Array.isArray(didDocument.controller) ? didDocument.controller : [didDocument.controller]\n      controllers = controllers.filter((c) => !resolved.includes(c))\n      const encrypterPromises = controllers.map((did) =>\n        encryptersForDID(did, resolved).catch(() => {\n          return []\n        })\n      )\n      const encrypterArrays = await Promise.all(encrypterPromises)\n      controllerEncrypters = ([] as Encrypter[]).concat(...encrypterArrays)\n    }\n    const agreementKeys: VerificationMethod[] = didDocument.keyAgreement\n      ?.map((key) => {\n        if (typeof key === 'string') {\n          return [...(didDocument.publicKey || []), ...(didDocument.verificationMethod || [])].find(\n            (pk) => pk.id === key\n          )\n        }\n        return key\n      })\n      ?.filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n    const pks =\n      agreementKeys?.filter((key) => {\n        // TODO: should be able to use non base58 keys too\n        return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58)\n      }) ?? []\n    if (!pks.length && !controllerEncrypters.length)\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    return pks\n      .map((pk) => x25519Encrypter(base58ToBytes(<string>pk.publicKeyBase58), pk.id))\n      .concat(...controllerEncrypters)\n  }\n\n  const encrypterPromises = dids.map((did) => encryptersForDID(did))\n  const encrypterArrays = await Promise.all(encrypterPromises)\n  const flattenedArray = ([] as Encrypter[]).concat(...encrypterArrays)\n  return flattenedArray\n}\n\nfunction validateHeader(header?: ProtectedHeader) {\n  if (!(header && header.epk && header.iv && header.tag)) {\n    throw new Error('bad_jwe: malformed header')\n  }\n}\n\nexport function x25519Decrypter(receiverSecret: Uint8Array | ECDH): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    validateHeader(recipient?.header)\n    recipient = <Recipient>recipient\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let sharedSecret\n    if (receiverSecret instanceof Uint8Array) {\n      sharedSecret = sharedKey(receiverSecret, publicKey)\n    } else {\n      sharedSecret = await receiverSecret(publicKey)\n    }\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    // Content Encryption Key\n    const sealedCek = toSealed(<string>recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientSecret: Uint8Array | ECDH,\n  senderPublicKey: Uint8Array\n): Decrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    recipient = <Recipient>recipient\n    validateHeader(recipient.header)\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let zE: Uint8Array\n    let zS: Uint8Array\n\n    if (recipientSecret instanceof Uint8Array) {\n      zE = sharedKey(recipientSecret, publicKey)\n      zS = sharedKey(recipientSecret, senderPublicKey)\n    } else {\n      zE = await recipientSecret(publicKey)\n      zS = await recipientSecret(senderPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    let producerInfo\n    let consumerInfo\n    if (recipient.header.apu) producerInfo = base64ToBytes(recipient.header.apu)\n    if (recipient.header.apv) consumerInfo = base64ToBytes(recipient.header.apv)\n\n    const kek = concatKDF(sharedSecret, keyLen, alg, producerInfo, consumerInfo)\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n"],"names":["bytesToBase64url","b","u8a","toString","base64ToBytes","s","inputBase64Url","replace","fromString","base58ToBytes","bytesToBase58","hexToBytes","input","startsWith","substring","toLowerCase","encodeBase64url","decodeBase64url","bytesToHex","stringToBytes","toJose","r","recoveryParam","recoverable","jose","Uint8Array","set","Error","fromJose","signature","signatureBytes","length","TypeError","slice","undefined","toSealed","ciphertext","tag","concat","leftpad","data","size","repeat","sha256","payload","hash","keccak","sha3","keccak_256","arrayBuffer","toEthereumAddress","hexPublicKey","hashInput","writeUint32BE","value","array","encoded","lengthAndInput","concatKDF","secret","keyLen","alg","producerInfo","consumerInfo","roundNumber","secp256k1","elliptic","ec","ES256KSigner","privateKey","privateKeyBytes","keyPair","keyFromPrivate","sign","SimpleSigner","hexPrivateKey","signer","EllipticSigner","EdDSASigner","secretKey","dataBytes","sig","NaclSigner","base64PrivateKey","instanceOfEcdsaSignature","object","ES256KSignerAlg","Ed25519SignerAlg","algorithms","ES256K","Ed25519","EdDSA","SignerAlg","impl","zl","zr","sl","sr","hl","hr","rotl","x","n","fn1","a","c","d","e","m","k","fn2","fn3","fn4","fn5","Ripemd160","constructor","blockSize","_a","_b","_c","_d","_e","_blockOffset","_block","_blockSize","_length","_finalized","update","block","offset","i","_update","j","carry","digest","_digest","fill","words","Array","temp","DataView","buffer","getInt32","al","bl","cl","dl","el","ar","br","cr","dr","er","tl","tr","t","setUint32","setInt32","publicKeyToAddress","publicKey","otherAddress","version","publicKeyBuffer","publicKeyHash","step1","step2","step3","checksum","step4","EC","prefix","compressedPublicKey","keyFromPublic","getPublic","encode","bech32","toWords","verifyBlockchainAccountId","blockchainAccountId","chain","split","bip122","cosmos","join","toSignatureObject","rawSig","sigObj","extractPublicKeyBytes","pk","publicKeyBase58","publicKeyBase64","publicKeyHex","publicKeyJwk","crv","y","publicKeyMultibase","base16","base58btc","base64","base64url","bases","baseDecoder","decoder","or","decode","verifyES256K","authenticators","fullPublicKeys","filter","ethereumAddress","blockchainAddressKeys","find","pubBytes","verify","err","verifyRecoverableES256K","signatures","so","checkSignatureAgainstSigner","recoveredKey","recoverPubKey","recoveredPublicKeyHex","recoveredCompressedPublicKeyHex","recoveredAddress","keyHex","map","key","verifyEd25519","clear","VerifierAlgorithm","resolveAuthenticator","resolver","issuer","proofPurpose","types","SUPPORTED_PUBLIC_KEY_TYPES","didResult","resolve","accept","DID_JSON","result","Object","getOwnPropertyNames","indexOf","didDocument","didDocumentMetadata","didResolutionMetadata","contentType","error","message","getPublicKeyById","verificationMethods","pubid","filtered","id","publicKeysToCheck","verificationMethod","includes","assertionMethod","type","supported","didResolutionResult","verifyJWT","jwt","options","auth","audience","callbackUrl","skewTime","header","decodeJWT","prototype","hasOwnProperty","call","iss","did","SELF_ISSUED_V2","sub","sub_jwk","kid","SELF_ISSUED_V0_1","verifyJWSDecoded","now","Math","floor","Date","NBF_SKEW","nowSkewed","nbf","iat","exp","aud","audArray","isArray","matchedAudience","item","createJWT","expiresIn","canonicalize","typ","timestamps","fullPayload","createJWS","defaultAlg","encodedPayload","encodeSection","signingInput","jwtSigner","shouldCanonicalize","canonicalizeData","JSON","stringify","decodeJWS","jws","parts","match","parse","decodedJwt","assign","pubKeys","verifyJWS","jwsDecoded","decryptJWE","jwe","decrypter","cleartext","validateJWE","protHeader","protected","enc","sealed","aad","decrypt","iv","recipients","recipient","bind","then","v","pact","onFulfilled","_this","thenable","rec","encrypted_key","encodeJWE","protectedHeader","createJWE","encrypters","encrypt","encryptionResult","tmpEnc","reduce","acc","encrypter","cek","encryptCek","push","createX25519ECDH","mySecretKey","theirPublicKey","sharedKey","resolveX25519Encrypters","dids","encryptersForDID","resolved","agreementKeys","keyAgreement","pks","Boolean","controllerEncrypters","x25519Encrypter","controller","controllers","encrypterPromises","catch","Promise","all","encrypterArrays","flattenedArray","createAuthEncrypter","recipientPublicKey","senderSecret","xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonEncrypter","createAuthDecrypter","recipientSecret","senderPublicKey","xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonDecrypter","x25519Decrypter","xc20pEncrypter","cipher","XChaCha20Poly1305","randomBytes","nonceLength","seal","subarray","tagLength","xc20pDirEncrypter","encodedAad","xc20pEncrypt","xc20pDirDecrypter","open","epk","generateKeyPair","sharedSecret","kek","res","kty","zE","zS","partyUInfo","partyVInfo","apu","apv","validateHeader","receiverSecret","sealedCek"],"mappings":"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"}